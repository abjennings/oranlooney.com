<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OranLooney.com</title>
    <link>/</link>
    <description>Recent content on OranLooney.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; Copyright 2018 Oran Looney</copyright>
    <lastBuildDate>Sun, 17 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Complex Numbers in R</title>
      <link>/post/complex-r/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/complex-r/</guid>
      <description>R, like most scientific programming languages, has first-class support for complex numbers. And, just like in most languages, this functionality is ignored by the vast majority of users.
Yet complex numbers can often offer suprisingly elegant formulations and solutions to problems. Let’s present one such problem and then show how we can use leverage R’s complex number functionalty to tackle it.
The ProblemA Pythagorean triple is an integer solution to the Pythagorean equation:</description>
    </item>
    
    <item>
      <title>Your First Two R Packages</title>
      <link>/post/r-first-two/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/r-first-two/</guid>
      <description>Don’t Start With Vanilla!It’s natural to assume you should learn the built-in libraries of a new language before moving on to third-party libraries. Unfortunately, when it comes to R, there are key areas where the built-in functionality is so terrible, and so out-dated, and so full of impossible-to-remember abbreviations, and frankly not very good even once you do learn it, that it’s best to start with a few high quality libraries and treat the built-in functionality as advanced functionalty that you’ll come back and learn when you need to interface with legacy code.</description>
    </item>
    
    <item>
      <title>So, Apparently I&#39;m an iPad Developer Now</title>
      <link>/post/apparently-ipad-developer/</link>
      <pubDate>Wed, 28 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/apparently-ipad-developer/</guid>
      <description>Last week my boss stopped by and dropped a brand spanking new iPad on my desk.&amp;quot;Make our application work on this,&amp;quot; he commanded. &amp;quot;You have two days before we demo it at the trade show.&amp;quot; Madness? No, these are web apps! You see, for the last couple years we&#39;ve beenworking exclusively on AJAX applications: web pages stuffed with so muchJavaScript they look and feel like desktop apps. It&#39;s harder than writingdesktop software, but if you pull it off you get an application that can berun anywhere, instantly.</description>
    </item>
    
    <item>
      <title>Deep Copy in JavaScript</title>
      <link>/post/deep-copy-javascript/</link>
      <pubDate>Wed, 25 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/deep-copy-javascript/</guid>
      <description>Update 2017-10-23: This article and code library have not kept up with the rapidly changing JavaScript landscape and are now hopelessly out of date. First came non-enumerable properties, and with ES2015 came the introduction of classes, proxies, symbols, and anonymous functions, all of which break the below logic. I&#39;m afraid I no longer know how to fully copy the full menagerie of JavaScript objects while preserving relative references, and it&#39;s quite possible that no one else knows either.</description>
    </item>
    
    <item>
      <title>Semantic Code</title>
      <link>/post/semantic-code/</link>
      <pubDate>Wed, 30 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/semantic-code/</guid>
      <description>se-man-tic (si-man&amp;rsquo;tik) adj. &amp;nbsp; &amp;nbsp; 1. Of or relating to meaning, especially meaning in language.
 Programming destroys meaning. When we program, we first replace concepts with symbols and then replace those symbols with arbitrary codes &amp;mdash; that&amp;rsquo;s why it&amp;rsquo;s called coding.
At its worst programming is write-only: the program accomplishes a task, but is incomprehensible to humans. See, for example, the story of Mel. Such a program is correct, yet at the same time meaningless.</description>
    </item>
    
  </channel>
</rss>